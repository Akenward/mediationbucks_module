<?php

/**
 * @file
 * A field to hold mediator availability data.
 */


/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function availability_week_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'availability_week_data' => array(
      'label' => t('Mediator availability'),
      'description' => t('Holds a weeks mediator availability data.'),
      'default_formatter' => 'availability_week_print',
      'default_widget' => 'availability_week_table',
      'property_type' => 'availability_week_data',
      'property_callbacks' => array('availability_week_data_property_info_callback'),
    ),
  );
}

function availability_week_data_property_info_callback(&$info, $entity_type, $field, $instance, $field_type) {
  $property = &$info[$entity_type]['bundles'][$instance['bundle']]['properties'][$field['field_name']];

  $property['getter callback'] = 'entity_metadata_field_verbatim_get';
  $property['setter callback'] = 'entity_metadata_field_verbatim_set';
  unset($property['query callback']);
  
  $property['property info']['notes'] = array(
    'type' => 'text',
    'label' => t('Notes'),
    'setter callback' => 'entity_property_verbatim_set',
  );
  $periods = availability_periods_factory();
  foreach ($periods -> availabilityTimes() as $m_t => $t_time) {
    foreach ($periods -> availabilityDays() as $m_d => $m_day) {
      $property['property info'][$m_t.'_'.$m_d] = array(
	    'type' => 'text',
        'label' => t('@time @day', array(@time => $t_time, @day => $m_day)),
        'setter callback' => 'entity_property_verbatim_set',
      );
	} 
  }
}


/**
 * Implements hook_field_validate().
 *
 */
function availability_week_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  
}


/**
 * Implements hook_field_is_empty().
 *
 */
function availability_week_field_is_empty($item, $field) {
  $field_empty = TRUE;
  $periods = availability_periods_factory();
  foreach ($periods -> availabilityTimes() as $m_t => $t_time) {
    foreach ($periods -> availabilityDays() as $m_d => $m_day) {
      if(!empty($item) && $item['week_table']['data_grid']['column_' . $m_t]['cell_'.$m_t.'_'.$m_d][$m_t.'_'.$m_d]) {
	  	$field_empty = FALSE;
	  }
	} 
  }
  /*if (!empty($item()) && $item != '') {
  	$field_empty = FALSE;
  }*/
  return $field_empty;
}

/**
 * Implements hook_field_formatter_info().
 *
 * @see availability_week_field_formatter_view()
 */
function availability_week_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'availability_week_print' => array(
      'label' => t('Formatted table of availability data'),
      'field types' => array('availability_week_data'),
    ),
    'availability_week_row' => array(
      'label' => t('Row of summary availability data for a week'),
      'field types' => array('availability_week_data'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * @see field_example_field_formatter_info()
 */
function availability_week_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
  	
    case 'availability_week_print':
	  foreach ($items as $delta => $item) {
        $element['#delta'] = $delta;
        $periods = availability_periods_factory();
        if (isset($item['notes'])){
	      $notes = ($item['notes']);
        }
        else {
  	      $notes = '';
        }
	    // Create a container for the whole view
	    $element[$delta]['week_table'] = array(
		  '#type' => 'container',
		  '#attributes' => array('class' => array('availability-week-table')),
		  // Within the overall contaner, create a column container for row captions
		  'caption_column' => array(
		    '#type' => 'container',
		    '#attributes' => array('class' => array('availability-week-caption-column')),
		    // Within the caption column container, create a blank caption for the heading row
		    'blank_caption' => array(
		      '#type' => 'container',
		      '#attributes' => array('class' => array('availability-view-dummy-caption-container')),
		      'row_caption_heading' => array(
		        '#markup' => '<span> &nbsp </span>',
		      ),
		    ),
		  ),
		  //Create a container alongside the caption column to hold column headings and the data
		  'data_grid' => array(
		    '#type' => 'container',
		    '#attributes' => array('class' => array('availability-week-data-grid')),
		  ),
	    );
	    // For each day, set up the row caption in the option column
	    foreach ($periods -> availabilityDays() as $m_d => $m_day) {
		  $element[$delta]['week_table']['caption_column'][] = array(
		    '#type' => 'container',
		    '#attributes' => array('class' => array('availability-row-caption-container')),
		    'row_caption_$m_d' => array(
		      '#markup' => '<span>' . $m_day . '</span>',
		    ),
		  );
	    }
	    // For each time of day, set up a column container and put the column heading at the top
	    $options = array(
	      1 => '0',
		  2 => '1',
		  3 => '1.0',
	    );
	    foreach ($periods -> availabilityTimes() as $m_t => $m_time) {
		  $element[$delta]['week_table']['data_grid']['column_' . $m_t] = array(
		    '#type' => 'container',
		    '#attributes' => array('class' => array('availability-grid-column-container')),
		      'column_heading_' . $m_t => array(
		        '#type' => 'container',
		        '#attributes' => array('class' => array('availability-grid-column-heading')),
			    'grid_box' => array(
			      '#markup' => '<div class="grid-column-heading-element">'. $m_time .'</div>',
			    ),
		      ),
		    );
		    // For each day, within time of day, add the data cell containing data value to the time of day column    
		    foreach ($periods -> availabilityDays() as $m_d => $m_day) {
		      if (isset($item[$m_t .'_' . $m_d])){
		  	    $value = $item[$m_t .'_' . $m_d];
		      }
		      else {
			    $value = 2;
		      }
		      $element[$delta]['week_table']['data_grid']['column_' . $m_t]['cell_' . $m_t . '_' . $m_d] = array(
		        '#type' => 'container',
		        '#attributes' => array('class' => array('availability-data-cell')),
		        $m_t . '_' . $m_d => array(
			      '#markup' => $value,//$options[$value],
			      '#attributes' => array('class' => array('availability-data-box')),
			    ), 
		      );
		    }
		  }
	      // Control for notes for the week
	      $element[$delta]['notes_label'] = array(
	        '#type' => 'container',
		    '#attributes' => array('class' => array('label-container')),
	        'notes_control_label' => array(
		      '#attributes' => array('class' => array('availability-label')),
		      '#markup' => 'Notes:',
			),
		  );
	      $element[$delta]['notes'] = array(
	        '#type' => 'container',
		    '#attributes' => array('class' => array('availability-notes-container textarea-container')),
		    'notes_control' => array(
		      '#attributes' => array('class' => array('availability-notes')),
		      '#markup' => $notes,
		    ),
	      );
	    }
    break;
	
	case 'availability_week_row':
	  foreach ($items as $delta => $item) {
        $element['#delta'] = $delta;
        $periods = availability_periods_factory();
	    // Create a container for the whole view
	    /*$element[$delta]['week_table'] = array(
		  '#type' => 'container',
		  '#attributes' => array('class' => array('availability-week-table')),
	    );*/
	    foreach ($periods -> availabilityTimes() as $m_t => $m_time) {
		    // For each day, within time of day, add the data cell containing data value to the time of day column    
		    foreach ($periods -> availabilityDays() as $m_d => $m_day) {
		      if (isset($item[$m_t .'_' . $m_d])){
		  	    $value = $item[$m_t .'_' . $m_d];
		      }
		      else {
			    $value = 2;
		      }
		      $element[$delta]['cell_' . $m_t . '_' . $m_d] = array(
		        '#type' => 'container',
		        '#attributes' => array('class' => array('availability-row-cell')),
		        $m_t . '_' . $m_d => array(
		          '#type' => 'markup',
			      '#markup' => $value,
			      '#attributes' => array('class' => array('availability-row-box')),
			    ), 
		      );
		    }
		  }
	    }
    break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 */
function availability_week_field_widget_info() {
  return array(
    'availability_week_table' => array(
      'label' => t('Grid of select controls'),
      'field types' => array('availability_week_data'),
    ),
    'availability_week_tiles' => array(
      'label' => t('Grid of clickable tiles'),
      'field types' => array('availability_week_data'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 */
function availability_week_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  switch ($instance['widget']['type']) {

    case 'availability_week_table':
	  $widget = array();
      $widget['#delta'] = $delta;
	  $widget['#validate'][] = 'availability_week_table_validate';
	  $widget['widget_info']['#type'] = 'value';
	  $widget['widget_info']['#value'] = 'availability_week_table';
	  
      $periods = availability_periods_factory();
      if (isset($items[$delta]) && $items[$delta]['notes']){
	    $default_notes = ($items[$delta]['notes']);
      }
      else {
  	    $default_notes = '';
      }
	  // Create a container for the whole widget
	  $widget['week_table'] = array(
		'#type' => 'container',
		'#attributes' => array('class' => array('availability-week-table')),
		'#weight' => '0',
		// Within the overall contaner, create a column container for row captions
		'caption_column' => array(
		  '#type' => 'container',
		  '#attributes' => array('class' => array('availability-week-caption-column')),
		  // Within the caption column container, create a blank caption for the heading row
		  'blank_caption' => array(
		    '#type' => 'container',
		    '#attributes' => array('class' => array('availability-dummy-caption-container')),
		    'row_caption_heading' => array(
		      '#markup' => '<span> &nbsp </span>',
		    ),
		  ),
		),
		// Create a container alongside the caption column to hold column headings and the data
		'data_grid' => array(
		  '#type' => 'container',
		  '#attributes' => array('class' => array('availability-week-data-grid')),
		),
	  );
	  // For each day, set up the row caption in the option column
	  foreach ($periods -> availabilityDays() as $m_d => $m_day) {
		$widget['week_table']['caption_column'][] = array(
		'#type' => 'container',
		'#attributes' => array('class' => array('availability-row-caption-container')),
		  'row_caption_$m_d' => array(
		    '#markup' => '<span>' . $m_day . '</span>',
		  ),
		);
	  }
	  // For each time of day, set up a column container and put the column heading at the top
	  foreach ($periods -> availabilityTimes() as $m_t => $m_time) {
		$widget['week_table']['data_grid']['column_' . $m_t] = array(
		'#type' => 'container',
		'#attributes' => array('class' => array('availability-grid-column-container')),
		  'column_heading_' . $m_t => array(
		    '#type' => 'container',
		    '#attributes' => array('class' => array('availability-grid-column-heading')),
			'grid_box' => array(
			  '#markup' => '<div class="grid-column-heading-element">'. $m_time .'</div>',
			),
		  ),
		);
		// For each day, within time of day, add the data cell containing data value to the time of day column    
		foreach ($periods -> availabilityDays() as $m_d => $m_day) {
		  if (isset($items[$delta]) && $items[$delta][$m_t .'_' . $m_d]){
		  	$default_value = $items[$delta][$m_t .'_' . $m_d];
		  }
		  else {
			$default_value = 2;
		  }
		  $widget['week_table']['data_grid']['column_' . $m_t]['cell_' . $m_t . '_' . $m_d] = array(
		    '#type' => 'container',
		    
		    '#attributes' => array('class' => array('availability-data-cell')),
		    $m_t . '_' . $m_d => array(
			  '#type' => 'select',
			  '#value_callback' => 'availability_week_table_value',
			  '#options' => array(
			    1 => '0',
			    2 => '1',
			    3 => '1.0',
			  ),
			  '#default_value' => $default_value,
			  '#attributes' => array('class' => array('availability-data-box')),
			), 
		  );
		}
	  }

      // Container for meeting info for the week
	  $widget['meetings_container'] = array(
		'#type' => 'container',
		'#weight' => 2,
		'#attributes' => array('class' => array('availability-meeting-container')),
	  );
	    
	  // Control for notes for the week
	  $widget['notes_control'] = array(
		'#type' => 'container',
		'#weight' => 4,
		'#attributes' => array('class' => array('availability-notes-container textarea-container')),
		'notes' => array(
		  '#type' => 'textarea',
		  '#title' => 'Notes',
		  '#attributes' => array('class' => array('availability-notes')),
		  '#default_value' => $default_notes,
		  '#value_callback' => 'availability_week_table_value',
		),
	  );
	  // Add css to format the table.
      $widget['#attached']['css'] = array(
        drupal_get_path('module', 'availability_week') . '/availability_week.css',
	  );
    break;
	case 'availability_week_tiles':
		
	break;
  }
  $element += $widget;
  //$element['#tree'] = FALSE;
  return $element;
}

function availability_week_table_value($element, $input, &$form_state) {
  $parents = $element['#parents'];
  $field_name = $parents[0];
  $lang = $parents[1];
  $delta = $parents[2];
  $column_name = end($parents);
  $form_state['values'][$field_name][$lang][$delta][$column_name] = $input;
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see field_example_field_validate()
 * @see form_error()
 */
function availability_week_field_widget_error($element, $error, $form, &$form_state) {
  /*switch ($error['error']) {
    case 'availability_week_invalid':
      form_error($element, $error['message']);
      break;
  }*/
}

/**
* Functions for indirect instantiation of classes
* @return: a new instance of the corresponding class  
*/	 
function availability_periods_factory() {
  return new AvailabilityPeriods();
}

