<?php

/**
 * Implements hook_field_info().
 *
 * Provides the summary data for the availability_week field.
 */
function availability_week_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'availability_week_data' => array(
      'label' => t('Mediator availability'),
      'description' => t('Holds a weeks mediator availability data.'),
      'default_widget' => 'availability_week_table',
      'default_formatter' => 'availability_week_print',
    ),
  );
}

/**
 * Implements hook_field_validate().
 *
 * Provides validation for input availability_week_data data
 *
 * @see field_example_field_widget_error()
 */
function availability_week_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {

}

/**
 * Implements hook_field_is_empty().
 *
 * Determines whether the availability_week_data field is empty or not
 */
function availability_week_field_is_empty($item, $field) {
  $field_empty = TRUE;
  $periods = availability_periods_factory();
  foreach ($periods -> availabilityDays() as $m_d => $m_day) {
    foreach ($periods -> availabilityTimes() as $m_t => $m_time) {
      if($item[$m_d.'_'.$m_t]) {
	  	$field_empty = FALSE;
	  }
	}  
  }
  return $field_empty;
}

/**
 * Implements hook_field_formatter_info().
 *
 * Tells Drupal about the formatter(s) for the availability_week_data field.
 *
 * @see field_example_field_formatter_view()
 */
function availability_week_field_formatter_info() {
  return array(
    // This formatter prints the availability information as a table.
    'availability_week_print' => array(
      'label' => t('Availability data for a week'),
      'field types' => array('availability_week_data'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * Only one formatter is implemented:
 * - showing availability data in a grid with times of day as columns
 *   and days of the week as rows.
 *
 */
function availability_week_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $availability_user_name = user_load($item['uid']);
  $element = array();
  switch ($display['type']) {
    // This formatter simply outputs the field as text and with a color.
    case 'availability_week_print':
      foreach ($items as $delta => $item) {
      	$availability_user_name = user_load($item['user_id']);
		$availability_start_date = new DrupalDateTime($item['start_date']);
        $element[$delta] = array(
		  'user_name' => array(
		    '#type' => 'html_tag',
		    '#tag' => 'div',
		    '#attributes' => array('class' => array('availability-user-name')),
		    '#value' => $availability_user_name,
		  ),
		  'start_date' => array(
		    '#type' => 'html_tag',
		    '#tag' => 'div',
		    '#attributes' => array('class' => array('availability-start-date')),
		    '#value' => 'Week commencing ' . $availability_start_date->format('D dd/M/YY'),
		  ),
		  'week_table' => array(
		    '#type' => 'container',
		    '#attributes' => array('class' => array('availability-week-table')),
		    'caption_column' => array(
		      '#type' => 'container',
		      '#attributes' => array('class' => array('availability-week-caption-column')),
		      'blank_caption' => array(
		        '#type' => 'html_tag',
		        '#tag' => 'div',
		        '#attributes' => array('class' => array('availability-week-row-caption')),
		        '#value' => '',
		      ),
		      'row_captions' => array(
		        '#type' => 'container',
		        '#attributes' => array('class' => array('availability-row-caption-container')),
		      ),
		      'main_table' => array(
		        '#type' => 'container',
		        '#class' => array('class' => array('availability-main-table')),
		      ),
		    ),
		  ),
		);
		$periods = availability_periods_factory();
		  foreach ($periods -> availabilityTimes() as $m_t => $m_time) {
		  	$element[$delta]['week_table']['main_table']['column_headings']['heading_' . m_t] = array(
		  	  '#type' => 'html_tag',
		      '#tag' => 'div',
		      '#attributes' => array('class' => array('column-heading')),
		      '#value' => $m_time,
            $element[$delta]['week_table']['main_table']['availability-data-column-' . m_t] = array(
			  '#type' => 'container',
			  '#attributes' => array('class' => array('availability-week-column', 'column_' . m_t )),
			);
            foreach ($periods -> availabilityDays() as $m_d => $m_day) {
            $element[$delta]['main_table']['main-column-' . m_t]['cell_'. m_d] = array(
              '#type' => 'html_tag',
              '#tag' => 'div',
              '#value' => t('@val', array('@val' => $item[$m_d.'_'.$m_t])),
            );
		  }
		}
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A simple text-only widget where the user enters the '#ffffff'.
 * - A 3-textfield widget that gathers the red, green, and blue values
 *   separately.
 * - A farbtastic colorpicker widget that chooses the value graphically.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see field_example_field_widget_form()
 */
function availability_field_widget_info() {
  return array(
    'availability_week_table' => array(
      'label' => t('Tiled table'),
      'field types' => array('availability_week_data'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'field_example_colorpicker' and 'field_example_text' are essentially
 * the same, but field_example_colorpicker adds a javascript colorpicker
 * helper.
 *
 * field_example_3text displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * rgb, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'rgb' form element.
 */
function availability_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  /*
     // Add javascript to trigger the colorpicker.
    $widget += array(
      'js' => array(drupal_get_path('module', 'availability') . 'scripts/table_style.js'),
    );
    break;
  */
  
  $widget = array();
  $widget['#delta'] = $delta;
  
  switch ($instance['widget']['type']) {
  
    case 'availability_week_table':
	  $periods = availability_periods_factory();
        
	  $widget = array();
		foreach ($periods -> availabilityTimes() as $m_t => $m_time) {
		  // Set up a container for each column of the grid 
		  $widget['c_'.$m_t] = array(
	        '#type' => 'container',
	        '#attributes' => array(
		      'class' => array('availability-day'),
		    ),
	      );
		  // Set up a container for the column heading for each period during the day within the column container
	      $widget['c_'.$m_t]['h_'.$m_t] = array(
  	        '#type' => 'container',
	        '#attributes' => array(
		      'class' => array('availability-heading'),
		    )
	      );
		  
          foreach ($periods -> availabilityDays() as $m_d => $m_day) {
          	// Set up a container for each cell of the grid within the corresponding column 
          	$meeting_class = 'hasnt-meeting';
          	$widget['c_'.$m_t]['c_'.$m_t.'_'.$m_d] = array(
  	          '#type' => 'container',
	          '#attributes' => array(
		        'class' => array('availability-wrapper', $meeting_class),
		      ),
	        );
          	$value = isset($items[$delta][$m_d.'_'.$m_t]) ? $items[$delta][$m_d.'_'.$m_t] : '';
			$widget['c_'.$m_t]['c_'.$m_t.'_'.$m_d]['e_'.$m_t.'_'.$m_d] = array(
	          '#type' => 'textfield',
	          '#size' => 5,
	          //'#type' => 'hidden',
	          '#default_value' => $value,
	          '#attributes' => array (
		        'class' => array('availability-control'),
		      ),
	        );
		  }
		}
      // Add javascript to work the tile clicking.
      $widget += array(
	    '#attached' => array(
          'js' => array(drupal_get_path('module', 'availability') . '/scripts/my_availability.js'),
	    ),
	  ); 
      break;
    }

  $element += $widget;
  return $element;
}